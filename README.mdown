t3
===
t3 is a template to build three.js applications without worrying about the common set up process, this project is inspired by [Jeromme's three.js boilerplate](https://github.com/jeromeetienne)

Features
--------
- Module defined to work anywhere (follows the UMD pattern)
- Integration with [dat.gui](http://workshop.chromeexperiments.com/examples/gui/) and [Stats](https://github.com/mrdoob/stats.js/)
- Micro scene handler for your multistaged app/game :)
- Micro camera manager
- Keyboard manager utility to catch keyboard events
- Themes for the default scene
- Frame rate control

Installation
------------

### Bower

Install the package with bower (recommended):

```bash
bower install t3
```

Or save the files in the `dist` folder on you project library (the old way)

### Use with RequireJS

By default bower will install the package on `bower_components/t3`, you might modify your requirejs configuration file adding a path to the source files

```javascript
requirejs.config({
  ...
  paths: {
    t3: 'path/to/bower_components/dist/t3'		// concatenated script
    // or
    t3: 'path/to/bower_components/dist/t3.min'	// minified script
  }
  ...
});
```

And require it on a module using:

```javascript
define(['t3'], function (t3) {
  // module t3 is loaded :)
});
```

### Explicitly importing the file on your project

As an alternative if you don't use RequireJS, add the source files (`t3.js` or `t3.min.js` which can be loaded with the source map for debugging purposes) to your page

```html
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>t3</title>
	<script src="path/to/bower_components/dist/t3.min.js"></script>	
</head>
<!-- ... -->
</html>
```

Getting Started
---------------
It's required that you create a container for the application identified with an `id`

```html
<div id="canvas"></div>	
```

The minimal example requires only the application's wrapper `id`:

```javascript
define(['t3'], function (t3) {
  return t3.Application.run({
    id: 'canvas'
  });
});
```

These simple scene defines:

- A default scene
- A default camera with [OrbitControls](https://github.com/mrdoob/three.js/blob/master/examples/js/controls/OrbitControls.js)
- A world with a grid in the XZ plane (defined in the [Coordinates model](https://github.com/maurizzzio/t3/blob/master/src/js/model/Coordinates.js#L22))
- A set of axes positioned at the center of the scene
- An indicator of the current frame rate
- A dat-gui folder to enable/disable some options

<iframe class="t3-example" src="../examples/?k=01" width="800px" height="400px">
</iframe>
[Demo in Full Screen >](../examples/?k=01)
[Source Code >](http://github.com/maurizzzio/t3/src/examples/scripts/01.js)

`T3.Application` is a function whose instances can control a single element of your app, this means that you can have 


How it works
------------
TODO

Examples
--------
TODO